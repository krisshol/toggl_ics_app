// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go

// Package main is a generated GoMock package.
package main

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSchedulerInterface is a mock of SchedulerInterface interface
type MockSchedulerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerInterfaceMockRecorder
}

// MockSchedulerInterfaceMockRecorder is the mock recorder for MockSchedulerInterface
type MockSchedulerInterfaceMockRecorder struct {
	mock *MockSchedulerInterface
}

// NewMockSchedulerInterface creates a new mock instance
func NewMockSchedulerInterface(ctrl *gomock.Controller) *MockSchedulerInterface {
	mock := &MockSchedulerInterface{ctrl: ctrl}
	mock.recorder = &MockSchedulerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchedulerInterface) EXPECT() *MockSchedulerInterfaceMockRecorder {
	return m.recorder
}

// do mocks base method
func (m *MockSchedulerInterface) do() {
	m.ctrl.Call(m, "do")
}

// do indicates an expected call of do
func (mr *MockSchedulerInterfaceMockRecorder) do() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "do", reflect.TypeOf((*MockSchedulerInterface)(nil).do))
}

// beginScheduling mocks base method
func (m *MockSchedulerInterface) beginScheduling() {
	m.ctrl.Call(m, "beginScheduling")
}

// beginScheduling indicates an expected call of beginScheduling
func (mr *MockSchedulerInterfaceMockRecorder) beginScheduling() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "beginScheduling", reflect.TypeOf((*MockSchedulerInterface)(nil).beginScheduling))
}
